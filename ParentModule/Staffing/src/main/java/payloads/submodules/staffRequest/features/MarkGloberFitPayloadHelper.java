package payloads.submodules.staffRequest.features;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import database.submodules.staffRequest.StaffRequestDBHelper;
import dto.submodules.staffRequest.features.MarkGloberFitUnfitSkillDTO;
import tests.testhelpers.submodules.staffRequest.features.MarkGloberFitTestHelper;
import utils.Utilities;

public class MarkGloberFitPayloadHelper {
	
	StaffRequestDBHelper staffRequestDBHelper = new StaffRequestDBHelper();
	Map<Object, Object> markGloberFitUnfitMap = new HashMap<Object, Object>();
	String json = null;
	
	/**
	 * Mark glober fit/unfit common values for payload
	 * @param userName
	 * @return map
	 * @throws Exception
	 */
	public Map<Object,Object> markGloberFitUnfitCommonValuesPayload(String userName) throws Exception {
		String userEmail = staffRequestDBHelper.getWorkMail(staffRequestDBHelper.getGloberId(userName));
		List<MarkGloberFitUnfitSkillDTO> listOfSkills = new MarkGloberFitTestHelper(userName).getSkillList();
		markGloberFitUnfitMap.put("bookingStatus", "");
		markGloberFitUnfitMap.put("interviewFeedbackType", "FITINTERVIEW");
		markGloberFitUnfitMap.put("userCompleteName", userName);
		markGloberFitUnfitMap.put("userEmail", userEmail);
		markGloberFitUnfitMap.put("globerPositionNeedDTOList", listOfSkills);
		markGloberFitUnfitMap.put("fitInterviewComment", "Additional comments added");
		markGloberFitUnfitMap.put("comments", "");
		
		return markGloberFitUnfitMap;
	}
	
	/**
	 * This method will create payload for mark fit glober according to the data
	 * @param data
	 * @return String
	 * @throws SQLException
	 */
	public String markGloberFitUnfitValidData(Map<Object, Object> data) throws SQLException {
		String userName = data.get("userName").toString();
		markGloberFitUnfitMap.put("type", data.get("type"));
		markGloberFitUnfitMap.put("status", data.get("status"));
		markGloberFitUnfitMap.put("fitInterviewStatus", data.get("status"));
		markGloberFitUnfitMap.put("staffPlanId", data.get("staffPlanId"));
		markGloberFitUnfitMap.put("type", data.get("type"));
		markGloberFitUnfitMap.put("autoGeneratedGloberFeedback", false);
		markGloberFitUnfitMap.put("fitInterviewReason", data.get("fitInterviewReason"));
		markGloberFitUnfitMap.put("fitInterviewGloberFeedback", data.get("fitInterviewGloberFeedback"));
		
		if(data.get("fitInterviewConducted")=="true") {
			markGloberFitUnfitMap.put("fitInterviewConducted", "true");
			String fitInterviewInterviewerId = staffRequestDBHelper.getRandomGloberId();
			String fitInterviewInterviewerName = staffRequestDBHelper.getGloberFullName(fitInterviewInterviewerId);
			markGloberFitUnfitMap.put("fitInterviewInterviewerId",fitInterviewInterviewerId);
			markGloberFitUnfitMap.put("fitInterviewInterviewerName", fitInterviewInterviewerName);
		}else {
			markGloberFitUnfitMap.put("fitInterviewConducted", "false");
			markGloberFitUnfitMap.put("fitInterviewInterviewerId", staffRequestDBHelper.getGloberId(userName));
			markGloberFitUnfitMap.put("fitInterviewInterviewerName", data.get("userName"));
		}
		json = Utilities.createJsonBodyFromMap(markGloberFitUnfitMap);
		return json;
	}
	
	/**
	 * This method will create payload of positive values
	 * @param map
	 * @return String
	 * @throws Exception 
	 */
	public String markGloberFitUnfitValidPayload(Map<Object,Object> map) throws Exception {
		markGloberFitUnfitMap = markGloberFitUnfitCommonValuesPayload(map.get("userName").toString());
		return markGloberFitUnfitValidData(map);
	}
}
